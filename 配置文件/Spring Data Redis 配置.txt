<!-- Spring Data Redis 的启动器 -->
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-data-redis</artifactId>
</dependency>

#  Redis 配置信息
spring.redis.pool.max-idle=10
spring.redis.pool.min-idle=5
spring.redis.pool.max-total=30

spring.redis.hostName=192.168.170.30
spring.redis.port=6379


# Redis 配置类

/**
 * Redis 配置
 *
 */
@Configuration
public class RedisConfig {
	
	/**
	 * 1.创建  JedisPoolConfig
	 * 
	 * @ConfigurationProperties 读取 application.properties 文件
	 *  会将前缀相同的内容创建一个实体
	 * 
	 */
	@Bean
	@ConfigurationProperties(prefix="spring.redis.pool")
	public JedisPoolConfig JedisPoolConfig(){
		JedisPoolConfig config = new JedisPoolConfig();
		return config;
	}
	
	/****
	 * 2. 创建 JedisConnection
	 */
	@Bean
	@ConfigurationProperties(prefix="spring.redis")
	public JedisConnectionFactory jedisConnectionFactory(JedisPoolConfig config){
		JedisConnectionFactory factory = new JedisConnectionFactory();
		factory.setPoolConfig(config);
		return factory;
	}
	
	/***
	 * 3.创建 RedisTemplate ：用于执行 Redis 操作的方法
	 */
	@Bean
	public RedisTemplate<String,Object> redisTemplate(JedisConnectionFactory factory){
		RedisTemplate<String, Object> template = new RedisTemplate<>();
		
		//关联 Jedis 连接工厂
		template.setConnectionFactory(factory);
		//为 key 设置序列化器
		template.setKeySerializer(new StringRedisSerializer());
		//为 value 设置序列化器
		template.setValueSerializer(new StringRedisSerializer());
		
		return template;
	}
}